{"remainingRequest":"E:\\Programming\\Bot Dev\\front_end\\node_modules\\babel-loader\\lib\\index.js!E:\\Programming\\Bot Dev\\front_end\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Programming\\Bot Dev\\front_end\\src\\http\\requests\\auth\\jwt\\index.js","dependencies":[{"path":"E:\\Programming\\Bot Dev\\front_end\\src\\http\\requests\\auth\\jwt\\index.js","mtime":1582084379921},{"path":"E:\\Programming\\Bot Dev\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Programming\\Bot Dev\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Programming\\Bot Dev\\front_end\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from \"../../../axios/index.js\";\nimport store from \"../../../../store/store.js\"; // Token Refresh\n\nvar isAlreadyFetchingAccessToken = false;\nvar subscribers = [];\n\nfunction onAccessTokenFetched(access_token) {\n  subscribers = subscribers.filter(function (callback) {\n    return callback(access_token);\n  });\n}\n\nfunction addSubscriber(callback) {\n  subscribers.push(callback);\n}\n\nexport default {\n  init: function init() {\n    axios.interceptors.response.use(function (response) {\n      return response;\n    }, function (error) {\n      // const { config, response: { status } } = error\n      var config = error.config,\n          response = error.response;\n      var originalRequest = config; // if (status === 401) {\n\n      if (response && response.status === 401) {\n        if (!isAlreadyFetchingAccessToken) {\n          isAlreadyFetchingAccessToken = true;\n          store.dispatch(\"auth/fetchAccessToken\").then(function (access_token) {\n            isAlreadyFetchingAccessToken = false;\n            onAccessTokenFetched(access_token);\n          });\n        }\n\n        var retryOriginalRequest = new Promise(function (resolve) {\n          addSubscriber(function (access_token) {\n            originalRequest.headers.Authorization = \"Bearer \" + access_token;\n            resolve(axios(originalRequest));\n          });\n        });\n        return retryOriginalRequest;\n      }\n\n      return Promise.reject(error);\n    });\n  },\n  login: function login(username, pwd) {\n    return axios.post(\"login\", {\n      username: username,\n      password: pwd\n    });\n  },\n  registerUser: function registerUser(username, pwd, page_id, access_token) {\n    return axios.post(\"register\", {\n      username: username,\n      page_id: page_id,\n      access_token: access_token,\n      password: pwd\n    });\n  },\n  refreshToken: function refreshToken() {\n    return axios.post(\"/api/auth/refresh-token\", {\n      accessToken: localStorage.getItem(\"accessToKen\")\n    });\n  }\n};",{"version":3,"sources":["E:/Programming/Bot Dev/front_end/src/http/requests/auth/jwt/index.js"],"names":["axios","store","isAlreadyFetchingAccessToken","subscribers","onAccessTokenFetched","access_token","filter","callback","addSubscriber","push","init","interceptors","response","use","error","config","originalRequest","status","dispatch","then","retryOriginalRequest","Promise","resolve","headers","Authorization","reject","login","username","pwd","post","password","registerUser","page_id","refreshToken","accessToken","localStorage","getItem"],"mappings":"AAAA,OAAOA,KAAP;AACA,OAAOC,KAAP,mC,CAEA;;AACA,IAAIC,4BAA4B,GAAG,KAAnC;AACA,IAAIC,WAAW,GAAG,EAAlB;;AAEA,SAASC,oBAAT,CAA8BC,YAA9B,EAA4C;AAC1CF,EAAAA,WAAW,GAAGA,WAAW,CAACG,MAAZ,CAAmB,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACF,YAAD,CAAZ;AAAA,GAA3B,CAAd;AACD;;AAED,SAASG,aAAT,CAAuBD,QAAvB,EAAiC;AAC/BJ,EAAAA,WAAW,CAACM,IAAZ,CAAiBF,QAAjB;AACD;;AAED,eAAe;AACbG,EAAAA,IADa,kBACN;AACLV,IAAAA,KAAK,CAACW,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CACE,UAASD,QAAT,EAAmB;AACjB,aAAOA,QAAP;AACD,KAHH,EAIE,UAASE,KAAT,EAAgB;AACd;AADc,UAENC,MAFM,GAEeD,KAFf,CAENC,MAFM;AAAA,UAEEH,QAFF,GAEeE,KAFf,CAEEF,QAFF;AAGd,UAAMI,eAAe,GAAGD,MAAxB,CAHc,CAKd;;AACA,UAAIH,QAAQ,IAAIA,QAAQ,CAACK,MAAT,KAAoB,GAApC,EAAyC;AACvC,YAAI,CAACf,4BAAL,EAAmC;AACjCA,UAAAA,4BAA4B,GAAG,IAA/B;AACAD,UAAAA,KAAK,CAACiB,QAAN,CAAe,uBAAf,EAAwCC,IAAxC,CAA6C,UAAAd,YAAY,EAAI;AAC3DH,YAAAA,4BAA4B,GAAG,KAA/B;AACAE,YAAAA,oBAAoB,CAACC,YAAD,CAApB;AACD,WAHD;AAID;;AAED,YAAMe,oBAAoB,GAAG,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAClDd,UAAAA,aAAa,CAAC,UAAAH,YAAY,EAAI;AAC5BW,YAAAA,eAAe,CAACO,OAAhB,CAAwBC,aAAxB,GAAwC,YAAYnB,YAApD;AACAiB,YAAAA,OAAO,CAACtB,KAAK,CAACgB,eAAD,CAAN,CAAP;AACD,WAHY,CAAb;AAID,SAL4B,CAA7B;AAMA,eAAOI,oBAAP;AACD;;AACD,aAAOC,OAAO,CAACI,MAAR,CAAeX,KAAf,CAAP;AACD,KA5BH;AA8BD,GAhCY;AAiCbY,EAAAA,KAjCa,iBAiCPC,QAjCO,EAiCGC,GAjCH,EAiCQ;AACnB,WAAO5B,KAAK,CAAC6B,IAAN,CAAW,OAAX,EAAoB;AACzBF,MAAAA,QAAQ,EAAEA,QADe;AAEzBG,MAAAA,QAAQ,EAAEF;AAFe,KAApB,CAAP;AAID,GAtCY;AAuCbG,EAAAA,YAvCa,wBAuCAJ,QAvCA,EAuCUC,GAvCV,EAuCeI,OAvCf,EAuCwB3B,YAvCxB,EAuCsC;AACjD,WAAOL,KAAK,CAAC6B,IAAN,CAAW,UAAX,EAAuB;AAC5BF,MAAAA,QAAQ,EAAEA,QADkB;AAE5BK,MAAAA,OAAO,EAAEA,OAFmB;AAG5B3B,MAAAA,YAAY,EAAEA,YAHc;AAI5ByB,MAAAA,QAAQ,EAAEF;AAJkB,KAAvB,CAAP;AAMD,GA9CY;AA+CbK,EAAAA,YA/Ca,0BA+CE;AACb,WAAOjC,KAAK,CAAC6B,IAAN,CAAW,yBAAX,EAAsC;AAC3CK,MAAAA,WAAW,EAAEC,YAAY,CAACC,OAAb,CAAqB,aAArB;AAD8B,KAAtC,CAAP;AAGD;AAnDY,CAAf","sourcesContent":["import axios from \"../../../axios/index.js\";\nimport store from \"../../../../store/store.js\";\n\n// Token Refresh\nlet isAlreadyFetchingAccessToken = false;\nlet subscribers = [];\n\nfunction onAccessTokenFetched(access_token) {\n  subscribers = subscribers.filter(callback => callback(access_token));\n}\n\nfunction addSubscriber(callback) {\n  subscribers.push(callback);\n}\n\nexport default {\n  init() {\n    axios.interceptors.response.use(\n      function(response) {\n        return response;\n      },\n      function(error) {\n        // const { config, response: { status } } = error\n        const { config, response } = error;\n        const originalRequest = config;\n\n        // if (status === 401) {\n        if (response && response.status === 401) {\n          if (!isAlreadyFetchingAccessToken) {\n            isAlreadyFetchingAccessToken = true;\n            store.dispatch(\"auth/fetchAccessToken\").then(access_token => {\n              isAlreadyFetchingAccessToken = false;\n              onAccessTokenFetched(access_token);\n            });\n          }\n\n          const retryOriginalRequest = new Promise(resolve => {\n            addSubscriber(access_token => {\n              originalRequest.headers.Authorization = \"Bearer \" + access_token;\n              resolve(axios(originalRequest));\n            });\n          });\n          return retryOriginalRequest;\n        }\n        return Promise.reject(error);\n      }\n    );\n  },\n  login(username, pwd) {\n    return axios.post(\"login\", {\n      username: username,\n      password: pwd\n    });\n  },\n  registerUser(username, pwd, page_id, access_token) {\n    return axios.post(\"register\", {\n      username: username,\n      page_id: page_id,\n      access_token: access_token,\n      password: pwd\n    });\n  },\n  refreshToken() {\n    return axios.post(\"/api/auth/refresh-token\", {\n      accessToken: localStorage.getItem(\"accessToKen\")\n    });\n  }\n};\n"]}]}