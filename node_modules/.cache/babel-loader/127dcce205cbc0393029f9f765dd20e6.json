{"remainingRequest":"E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\node_modules\\babel-loader\\lib\\index.js!E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\src\\fake-db\\data\\user\\index.js","dependencies":[{"path":"E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\src\\fake-db\\data\\user\\index.js","mtime":1573150656000},{"path":"E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Programming\\JS\\vuexy-vuejs-admin\\full-version\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport mock from \"@/fake-db/mock.js\";\nimport jwt from 'jsonwebtoken';\nvar data = {\n  checkpointReward: {\n    userName: \"John\",\n    progress: \"57.6%\"\n  },\n  users: [{\n    uid: 34,\n    displayName: \"Howard Potts\",\n    password: \"adminadmin\",\n    photoURL: require(\"@/assets/images/portrait/small/avatar-s-5.jpg\"),\n    email: \"admin@admin.com\",\n    phoneNumber: null\n  }]\n};\nvar jwtConfig = {\n  \"secret\": \"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\n  \"expireTime\": 8000\n};\nmock.onPost(\"/api/auth/login\").reply(function (request) {\n  var _JSON$parse = JSON.parse(request.data),\n      email = _JSON$parse.email,\n      password = _JSON$parse.password;\n\n  var error = \"Something went wrong\";\n  var user = data.users.find(function (user) {\n    return user.email === email && user.password === password;\n  });\n\n  if (user) {\n    try {\n      var accessToken = jwt.sign({\n        id: user.uid\n      }, jwtConfig.secret, {\n        expiresIn: jwtConfig.expireTime\n      });\n      var userData = Object.assign({}, user, {\n        providerId: \"jwt\"\n      });\n      var response = {\n        userData: userData,\n        accessToken: accessToken\n      };\n      return [200, response];\n    } catch (e) {\n      error = e;\n    }\n  } else {\n    error = \"Email Or Password Invalid\";\n  }\n\n  return [200, {\n    error: error\n  }];\n});\nmock.onPost('/api/auth/register').reply(function (request) {\n  var _JSON$parse2 = JSON.parse(request.data),\n      displayName = _JSON$parse2.displayName,\n      email = _JSON$parse2.email,\n      password = _JSON$parse2.password;\n\n  var isEmailAlreadyInUse = data.users.find(function (user) {\n    return user.email === email;\n  });\n  var error = {\n    email: isEmailAlreadyInUse ? 'This email is already in use.' : null,\n    displayName: displayName === '' ? 'Please enter your name.' : null\n  };\n\n  if (!error.displayName && !error.email) {\n    var userData = {\n      email: email,\n      password: password,\n      displayName: displayName,\n      photoURL: require(\"@/assets/images/portrait/small/avatar-s-5.jpg\"),\n      phoneNumber: null\n    }; // Add user id\n\n    var length = data.users.length;\n    var lastIndex = 0;\n\n    if (length) {\n      lastIndex = data.users[length - 1].uid;\n    }\n\n    userData.uid = lastIndex + 1;\n    data.users.push(userData);\n    var accessToken = jwt.sign({\n      id: userData.uid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expireTime\n    });\n    var user = Object.assign({}, userData);\n    delete user['password'];\n    var response = {\n      userData: user,\n      accessToken: accessToken\n    };\n    return [200, response];\n  } else {\n    return [200, {\n      error: error\n    }];\n  }\n});\nmock.onPost('/api/auth/refresh-token').reply(function (request) {\n  var _JSON$parse3 = JSON.parse(request.data),\n      accessToken = _JSON$parse3.accessToken;\n\n  try {\n    var _jwt$verify = jwt.verify(accessToken, jwtConfig.secret),\n        id = _jwt$verify.id;\n\n    var userData = Object.assign({}, data.users.find(function (user) {\n      return user.uid === id;\n    }));\n    var newAccessToken = jwt.sign({\n      id: userData.uid\n    }, jwtConfig.secret, {\n      expiresIn: jwtConfig.expiresIn\n    });\n    delete userData['password'];\n    var response = {\n      userData: userData,\n      accessToken: newAccessToken\n    };\n    return [200, response];\n  } catch (e) {\n    var error = \"Invalid access token\";\n    return [401, {\n      error: error\n    }];\n  }\n});\nmock.onGet(\"/api/user/checkpoint-reward\").reply(function () {\n  return [200, data.checkpointReward];\n});",{"version":3,"sources":["E:/Programming/JS/vuexy-vuejs-admin/full-version/src/fake-db/data/user/index.js"],"names":["mock","jwt","data","checkpointReward","userName","progress","users","uid","displayName","password","photoURL","require","email","phoneNumber","jwtConfig","onPost","reply","request","JSON","parse","error","user","find","accessToken","sign","id","secret","expiresIn","expireTime","userData","Object","assign","providerId","response","e","isEmailAlreadyInUse","length","lastIndex","push","verify","newAccessToken","onGet"],"mappings":"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","sourcesContent":["import mock from \"@/fake-db/mock.js\"\nimport jwt from 'jsonwebtoken'\n\nconst data = {\n  checkpointReward: {\n    userName: \"John\",\n    progress: \"57.6%\"\n  },\n  users: [\n    {\n      uid: 34,\n      displayName: \"Howard Potts\",\n      password: \"adminadmin\",\n      photoURL: require(\"@/assets/images/portrait/small/avatar-s-5.jpg\"),\n      email: \"admin@admin.com\",\n      phoneNumber: null,\n    }\n  ]\n}\n\n\nconst jwtConfig = {\n    \"secret\"   : \"dd5f3089-40c3-403d-af14-d0c228b05cb4\",\n    \"expireTime\": 8000\n}\n\n\nmock.onPost(\"/api/auth/login\").reply((request) => {\n  const {email, password} = JSON.parse(request.data)\n\n  let error = \"Something went wrong\"\n\n  const user = data.users.find(user => user.email === email && user.password === password)\n\n  if (user) {\n\n    try {\n\n      const accessToken = jwt.sign({id: user.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      const userData = Object.assign({}, user, {providerId: \"jwt\"})\n\n      const response = {\n        userData : userData,\n        accessToken: accessToken\n      }\n\n      return [200, response]\n\n    } catch(e) {\n      error = e\n    }\n  }else {\n    error = \"Email Or Password Invalid\"\n  }\n\n  return [200, {error}]\n\n\n})\n\nmock.onPost('/api/auth/register').reply((request) => {\n    const {displayName, email, password} = JSON.parse(request.data)\n    const isEmailAlreadyInUse = data.users.find((user) => user.email === email)\n    const error = {\n      email      : isEmailAlreadyInUse ? 'This email is already in use.' : null,\n      displayName: displayName === '' ? 'Please enter your name.' : null\n    }\n\n    if ( !error.displayName && !error.email ) {\n\n      let userData = {\n        email: email,\n        password: password,\n        displayName: displayName,\n        photoURL: require(\"@/assets/images/portrait/small/avatar-s-5.jpg\"),\n        phoneNumber: null\n      }\n\n      // Add user id\n      const length = data.users.length\n      let lastIndex = 0\n      if(length){\n        lastIndex = data.users[length - 1].uid\n      }\n      userData.uid = lastIndex + 1\n\n      data.users.push(userData)\n\n      const accessToken = jwt.sign({id: userData.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expireTime})\n\n      let user = Object.assign({}, userData)\n      delete user['password']\n      const response = { userData: user, accessToken: accessToken }\n\n      return [200, response]\n    } else {\n      return [200, {error}]\n    }\n})\n\n\nmock.onPost('/api/auth/refresh-token').reply((request) => {\n\n  const {accessToken} = JSON.parse(request.data)\n\n  try {\n    const {id} = jwt.verify(accessToken, jwtConfig.secret)\n\n    let userData = Object.assign({}, data.users.find(user => user.uid === id))\n\n    const newAccessToken = jwt.sign({id: userData.uid}, jwtConfig.secret, {expiresIn: jwtConfig.expiresIn});\n\n    delete userData['password']\n    const response = {\n      userData: userData,\n      accessToken: newAccessToken\n    }\n\n    return [200, response]\n  } catch (e){\n    const error = \"Invalid access token\"\n    return [401, {error}]\n  }\n})\n\n\nmock.onGet(\"/api/user/checkpoint-reward\").reply(() => {\n  return [200, data.checkpointReward];\n});\n"]}]}